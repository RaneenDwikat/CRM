openapi: 3.0.0
info:
  title: Swagger Test
  contact:
    email: raneen.dwikat@niftysouq.com
  version: 1.0.11
servers:
  - url: http://localhost:3000/
paths:

  /customer/getwithactivateservices:
    get:
      tags:
        - customer
      summary: get customers with their active services
      operationId: getCustumerwithActiveServices
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getwithactivateservices'
            application/xml:
              schema:
                $ref: '#/components/schemas/getwithactivateservices'
  /customer/getwithservices/{_id}:
    get:
      tags:
        - customer
      summary: get customer with his services
      operationId: getCustumerwithServices
      parameters:
        - name: _id
          in: path
          description: id that need to spacify which customer
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getwithservices'
            application/xml:
              schema:
                $ref: '#/components/schemas/getwithservices'
  /customer/add:
    post:
      tags:
        - customer
      summary: Create customer
      security:
      - bearerAuth: [] 
      operationId: createCustomer
      requestBody:
        description: Created customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
  /customer/update/{_id}:
    put:
      tags:
        - customer
      summary: Update customer
      security:
      - bearerAuth: [] 
      description: This can only be done by the employee.
      operationId: updateCustomer
      parameters:
        - name: _id
          in: path
          description: id that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        default:
          description: successful operation
  /customer/deleteservice/{customer}/{service}:
    delete:
      tags:
        - customer
      summary: delete service for customer
      security:
      - bearerAuth: [] 
      description: This can only be done by the employee.
      operationId: deleteservice
      parameters:
        - name: customer
          in: path
          description: id that need to be deleted
          required: true
          schema:
            type: string
        - name: service
          in: path
          description: id that need to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /customer/addservice:
    post:
      tags:
        - customer
      summary: add service for customer
      security:
      - bearerAuth: []
      description: This can only be done by the employee.
      operationId: addservice
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerService'
          application/xml:
            schema:
              $ref: '#/components/schemas/CustomerService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerService'
      responses:
        default:
          description: successful operation
  /customer/delete/{_id}:
    delete:
      tags:
        - customer
      summary: Delete customer
      security:
      - bearerAuth: []
      description: This can only be done by the employee.
      operationId: deleteCustomer
      parameters:
        - name: _id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /customer/stopservice:
    put:
      tags:
        - service
      summary: stop Service
      security:
      - bearerAuth: []
      description: This can only be done by the employee.
      operationId: stopservice
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerService'
          application/xml:
            schema:
              $ref: '#/components/schemas/CustomerService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        default:
          description: successful operation
  /customer/activateservice:
    put:
      tags:
        - service
      summary: activate Service
      security:
      - bearerAuth: []
      description: This can only be done by the employee.
      operationId: activateservice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerService'
          application/xml:
            schema:
              $ref: '#/components/schemas/CustomerService'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        default:
          description: successful operation
  /employee/add:
    post:
      tags:
        - employee
      summary: Create employee
      security:
      - bearerAuth: []
      operationId: createEmployee
      requestBody:
        description: Created employee object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Employee'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
            application/xml:
              schema:
                $ref: '#/components/schemas/Employee'
  /service/add:
    post:
      tags:
        - service
      summary: Create service
      security:
      - bearerAuth: []
      operationId: createService
      requestBody:
        description: Created service object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          application/xml:
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
            application/xml:
              schema:
                $ref: '#/components/schemas/Service'
  /service/updateservice/{_id}:
    put:
      tags:
        - service
      summary: Update Service
      security:
      - bearerAuth: []
      description: This can only be done by the employee.
      operationId: updateservice
      parameters:
        - name: _id
          in: path
          description: id that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
          application/xml:
            schema:
              $ref: '#/components/schemas/Service'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        default:
          description: successful operation
  /service/delete/{_id}:
    delete:
      tags:
        - service
      summary: Delete service
      description: This can only be done by the super admin.
      operationId: deleteService
      parameters:
        - name: _id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /super/login:
    post:
      tags:
        - super
      summary: login
      operationId: login
      requestBody:
        description: login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Super'
          application/xml:
            schema:
              $ref: '#/components/schemas/Super'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Super'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Super'
            application/xml:
              schema:
                $ref: '#/components/schemas/Super'


          
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Super:
      required:
        - email
        - password
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          example: 63543c168d39fb31ddbc3a60
        email:
          type: string
          format: email
          example: raneen@gmail.com
        password:
          type: string
          description: admin password
          format: password
          example: 123012301230
        last_login:
          type: string
          description: last login
          format: date
          example: 2022-11-08T13:29:21.000+00:00
      xml:
        name: super
    Customer:
      required:
        - username
        - email
        - password
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          example: 63543c168d39fb31ddbc3a60
        username:
          type: string
          example: customer_1
        email:
          type: string
          format: email
          example: customer_1@gmail.com
        password:
          type: string
          description: admin password
          format: password
          example: 123012301230
        last_login:
          type: string
          description: last login
          format: date
          example: 2022-11-08T13:29:21.000+00:00
      xml:
        name: customer
    Employee:
      required:
        - username
        - email
        - password
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          example: 63543c168d39fb31ddbc3a60
        username:
          type: string
          example: employee_1
        email:
          type: string
          format: email
          example: employee_1@gmail.com
        password:
          type: string
          description: admin password
          format: password
          example: 123012301230
        last_login:
          type: string
          description: last login
          format: date
          example: 2022-11-08T13:29:21.000+00:00
      xml:
        name: employee
    Service:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          example: 63543c168d39fb31ddbc3a60
        title:
          type: string
          example: 1st service
        description:
          type: string
          example: 1st service description
      xml:
        name: service
    CustomerService:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
          example: 63543c168d39fb31ddbc3a60
        customer:
          type: string
          example: 636a84b56e575c23fa545fa5
        service:
          type: string
          example: 636c1d3c18b18fcf9e3f6998
        status:
          type: string
          example: active
          enum:
            - active
            - stopped
      xml:
        name: customerservice
        
    getwithactivateservices:
      type: object
      properties:
        _id:
          type: string
          example: 63543c168d39fb31ddbc3a60
        username:
          type: string
          example: employee_1
        email:
          type: string
          format: email
          example: employee_1@gmail.com
        last_login:
          type: string
          description: last login
          format: date
          example: 2022-11-08T13:29:21.000+00:00
        customerService:
          type: array
          items:
            type: object
            properties:
              services:
                type: array
                items: 
                  type: object
                  properties:
                    description:
                      type: string
                      example: 1st service description 
                    title:
                      type: string
                      example: 1st service
      xml:
        name: getwithactivateservices

    getwithservices:
      type: object
      properties:
        _id:
          type: string
          example: 63543c168d39fb31ddbc3a60
        username:
          type: string
          example: employee_1
        email:
          type: string
          format: email
          example: employee_1@gmail.com
        password:
          type: string
          description: admin password
          format: password
          example: 123012301230
        last_login:
          type: string
          description: last login
          format: date
          example: 2022-11-08T13:29:21.000+00:00
        customerService:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                example: active
              services:
                type: array
                items: 
                  type: object
                  properties:
                    description:
                      type: string
                      example: 1st service description 
                    title:
                      type: string
                      example: 1st service
      xml:
        name: getwithservices       
              


